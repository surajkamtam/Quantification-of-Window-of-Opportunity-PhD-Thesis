#include "veins/modules/application/traci/MyVeinsApp.h"
#include "veins/modules/application/traci/TraCIDemo11pRSUMessage_m.h"
#include "veins/modules/application/traci/TraCIDemo11pMessage_m.h"

#include <fstream>
#include <vector>
#include <iterator>
#include <cstdlib>
#include <string>
#include <iostream>
#include <unordered_map>

using namespace veins;
using namespace std;

Define_Module(veins::MyVeinsApp);

Coord vPos;
bool DoSAttack;

const char *vehID;
ofstream out("out.txt", ios::out | ios::trunc);

void MyVeinsApp::initialize(int stage) {
    DemoBaseApplLayer::initialize(stage);

    if (stage == 0) {
        sentMessage = false;
        lastDroveAt = simTime();
        currentSubscribedServiceId = -1;

        cout.rdbuf(out.rdbuf());
        cout << "[INIT] MyVeinsApp initialized (stage 0)" << endl;
    }

    if (stage == 1) {
        DoSAttack = true;
        nDos = par("nDosMessages");
        messageReceiveVector.setName("Received Messages Timestamp");

        cout << "[INIT] DoSAttack enabled, nDos = " << nDos << endl;
    }
}

void MyVeinsApp::onWSM(BaseFrame1609_4 *frame) {
    cout << "[onWSM] Received a message." << endl;

    if (!frame) {
        cout << "[ERROR] Received null frame!" << endl;
        return;
    }

    TraCIDemo11pMessage *wsm = dynamic_cast<TraCIDemo11pMessage*>(frame);
    if (!wsm) {
        cout << "[ERROR] Received message is not of type TraCIDemo11pMessage!" << endl;
        return;
    }

    cout << "[onWSM] Received message from " << wsm->getVehicleId() << endl;

    if (DoSAttack) {
        if (nDos > 0) {
            beaconInterval.setRaw(beaconInterval.raw() / nDos);
            cout << "[onWSM] Adjusting beacon interval: " << beaconInterval << endl;
        } else {
            cout << "[ERROR] nDos is 0, cannot modify beaconInterval!" << endl;
        }
        DoSAttack = false;
    } else {
        cout << "[onWSM] Else block executed, setting beaconInterval to 1" << endl;
        beaconInterval.setRaw(1);
    }
    messageReceiveVector.record(simTime().dbl());
}

void MyVeinsApp::handleSelfMsg(cMessage *msg) {
    cout << "[handleSelfMsg] Handling self message." << endl;
    DemoBaseApplLayer::handleSelfMsg(msg);
}

void MyVeinsApp::handlePositionUpdate(cObject *obj) {
    cout << "[handlePositionUpdate] Position update triggered." << endl;

    TraCIDemo11pMessage *wsm = new TraCIDemo11pMessage();

    vehID = mobility->getExternalId().c_str();
    vPos = mobility->getCurrentPosition();

    cout << "[handlePositionUpdate] Vehicle ID: " << vehID << " Position: " << vPos << endl;

    wsm->setDemoData("Attack Test");
    wsm->setVehicleId(vehID);
    wsm->setCarSenderPos(vPos);
    populateWSM(wsm);
    sendDown(wsm);

    cout << "[handlePositionUpdate] Message sent." << endl;
}
