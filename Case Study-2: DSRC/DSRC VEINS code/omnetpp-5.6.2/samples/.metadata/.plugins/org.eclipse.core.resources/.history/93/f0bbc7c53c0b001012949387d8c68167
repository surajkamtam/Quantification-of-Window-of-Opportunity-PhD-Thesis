#include "veins/modules/application/traci/MyVeinsApp.h"
#include "veins/modules/application/traci/TraCIDemo11pRSUMessage_m.h"
#include "veins/modules/application/traci/TraCIDemo11pMessage_m.h"

#include <fstream>
#include <vector>
#include <iterator>
#include <cstdlib>
#include <string>
#include <iostream>
#include <unordered_map>

using namespace veins;
using namespace std;

Define_Module(veins::MyVeinsApp);

Coord vPos;
bool DoSAttack;


ofstream out("out.txt", ios::out | ios::trunc);

void MyVeinsApp::initialize(int stage) {
    DemoBaseApplLayer::initialize(stage);

    if (stage == 0) {
        sentMessage = false;
        lastDroveAt = simTime();
        currentSubscribedServiceId = -1;

        cout.rdbuf(out.rdbuf());
    }

if (stage == 1) {
    DoSAttack=true;
    nDos = par("nDosMessages");
}
}

void MyVeinsApp::onWSM(BaseFrame1609_4 *frame) {
TraCIDemo11pMessage *wsm = dynamic_cast<TraCIDemo11pMessage*>(frame);
if(wsm){
if (DoSAttack==true){
   beaconInterval.setRaw(beaconInterval.raw() / nDos);
   cout<<nDos<<endl;
   cout<<beaconInterval<<endl;
   DoSAttack=false;
   }
   else{
       cout<<"Else working"<<endl;
   beaconInterval.setRaw(1);
   }
}
}

void MyVeinsApp::handleSelfMsg(cMessage *msg) {
DemoBaseApplLayer::handleSelfMsg(msg);
}

void MyVeinsApp::handlePositionUpdate(cObject *obj) {
    const char* vehID;


    vehID = mobility->getExternalId().c_str();
    vPos = mobility->getCurrentPosition();
TraCIDemo11pMessage *wsm = new TraCIDemo11pMessage();
populateWSM(wsm);
wsm->setDemoData("Attack Test");
wsm->setVehicleId(vehID);
wsm->setCarSenderPos(vPos);
sendDown(wsm);

}
